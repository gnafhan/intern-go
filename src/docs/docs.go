// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/categories": {
            "get": {
                "description": "Retrieve all categories.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of categories",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetCategoriesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/example.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a category.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Create a category",
                "parameters": [
                    {
                        "description": "Category",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.CreateCategoryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/example.BadRequest"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/example.InternalServerError"
                        }
                    }
                }
            }
        },
        "/categories/{categoryId}": {
            "get": {
                "description": "Retrieve a category by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetCategoryByIDResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a category.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UpdateCategoryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/example.BadRequest"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/example.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a category.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.DeleteCategoryResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/example.InternalServerError"
                        }
                    }
                }
            }
        },
        "/health-check": {
            "get": {
                "description": "Check the status of services and database connections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.HealthCheckResponseError"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "Retrieve all tasks.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get all tasks",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of tasks",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by title or description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field (created_at, updated_at, deadline, priority, title)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by priority (low, medium, high)",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category_id (UUID)",
                        "name": "category_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.TaskListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a task.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a task",
                "parameters": [
                    {
                        "description": "Task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateTask"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.TaskCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{taskId}": {
            "get": {
                "description": "Retrieve a task by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get a task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.TaskDetailResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a task.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Update a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateTask"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.TaskUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a task.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.TaskDeleteResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "example.BadRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Bad request"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.CategoryExample": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "fake id"
                },
                "name": {
                    "type": "string",
                    "example": "fake name"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                }
            }
        },
        "example.CreateCategoryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.CategoryExample"
                },
                "message": {
                    "type": "string",
                    "example": "Category created successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.DeleteCategoryResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Category deleted successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetCategoriesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.CategoryExample"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Categories retrieved successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "example.GetCategoryByIDResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.CategoryExample"
                },
                "message": {
                    "type": "string",
                    "example": "Category retrieved successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.HealthCheck": {
            "type": "object",
            "properties": {
                "is_up": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Postgre"
                },
                "status": {
                    "type": "string",
                    "example": "Up"
                }
            }
        },
        "example.HealthCheckError": {
            "type": "object",
            "properties": {
                "is_up": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "failed to connect to 'host=localhost user=postgres database=wrongdb': server error (FATAL: database \"wrongdb\" does not exist (SQLSTATE 3D000))"
                },
                "name": {
                    "type": "string",
                    "example": "Postgre"
                },
                "status": {
                    "type": "string",
                    "example": "Down"
                }
            }
        },
        "example.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "is_healthy": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Health check completed"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.HealthCheck"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.HealthCheckResponseError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "is_healthy": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "Health check completed"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.HealthCheckError"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.InternalServerError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.NotFound": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "message": {
                    "type": "string",
                    "example": "Not found"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.UpdateCategoryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/example.CategoryExample"
                },
                "message": {
                    "type": "string",
                    "example": "Category updated successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "response.CategorySimple": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "errors": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.TaskCreateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.TaskResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.TaskDeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "response.TaskDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.TaskResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.TaskListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.TaskResponse"
                    }
                },
                "message": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "response.TaskResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/response.CategorySimple"
                },
                "category_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "response.TaskUpdateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.TaskResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "validation.CreateCategory": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                }
            }
        },
        "validation.CreateTask": {
            "type": "object",
            "required": [
                "category_id",
                "deadline",
                "description",
                "priority",
                "title"
            ],
            "properties": {
                "category_id": {
                    "type": "string",
                    "example": "fake category id"
                },
                "deadline": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "fake description"
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "low",
                        "medium",
                        "high"
                    ],
                    "example": "low"
                },
                "title": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake title"
                }
            }
        },
        "validation.UpdateCategory": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                }
            }
        },
        "validation.UpdateTask": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string",
                    "example": "fake category id"
                },
                "deadline": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "maxLength": 255,
                    "example": "fake description"
                },
                "priority": {
                    "type": "string",
                    "enum": [
                        "low",
                        "medium",
                        "high"
                    ],
                    "example": "medium"
                },
                "title": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake title"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:3000",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "API documentation",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
